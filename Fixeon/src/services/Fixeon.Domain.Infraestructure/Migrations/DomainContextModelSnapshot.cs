// <auto-generated />
using System;
using Fixeon.Domain.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fixeon.Domain.Infraestructure.Migrations
{
    [DbContext(typeof(DomainContext))]
    partial class DomainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Interaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("interactions");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Interaction", b =>
                {
                    b.HasOne("Fixeon.Domain.Core.Entities.Ticket", "Ticket")
                        .WithMany("Interactions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.Attachment", "Attachments", b1 =>
                        {
                            b1.Property<Guid>("InteractionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstAttachment")
                                .HasColumnType("varchar(250)")
                                .HasColumnName("FirstAttachment");

                            b1.Property<string>("SecondAttachment")
                                .HasColumnType("varchar(250)")
                                .HasColumnName("SecondAttachment");

                            b1.Property<string>("ThirdAttachment")
                                .HasColumnType("varchar(250)")
                                .HasColumnName("ThirdAttachment");

                            b1.HasKey("InteractionId");

                            b1.ToTable("interactions");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId");
                        });

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.InteractionUser", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("InteractionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasColumnType("varchar(36)")
                                .HasColumnName("userId");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("username");

                            b1.HasKey("InteractionId");

                            b1.ToTable("interactions");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId");
                        });

                    b.Navigation("Attachments")
                        .IsRequired();

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Ticket", b =>
                {
                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.Attachment", "Attachments", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstAttachment")
                                .HasColumnType("varchar(250)")
                                .HasColumnName("FirstAttachment");

                            b1.Property<string>("SecondAttachment")
                                .HasColumnType("varchar(250)")
                                .HasColumnName("SecondAttachment");

                            b1.Property<string>("ThirdAttachment")
                                .HasColumnType("varchar(250)")
                                .HasColumnName("ThirdAttachment");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.Analist", "AssignedTo", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AnalistId")
                                .IsRequired()
                                .HasColumnType("varchar(36)")
                                .HasColumnName("analistId");

                            b1.Property<string>("AnalistName")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("analistName");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.User", "CreatedByUser", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasColumnType("varchar(36)")
                                .HasColumnName("userId");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("username");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("AssignedTo");

                    b.Navigation("Attachments")
                        .IsRequired();

                    b.Navigation("CreatedByUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Ticket", b =>
                {
                    b.Navigation("Interactions");
                });
#pragma warning restore 612, 618
        }
    }
}

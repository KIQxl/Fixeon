// <auto-generated />
using System;
using Fixeon.Domain.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fixeon.Domain.Infraestructure.Migrations
{
    [DbContext(typeof(DomainContext))]
    [Migration("20250904004612_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<Guid?>("InteractionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Filename");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("InteractionId");

                    b.HasIndex("TicketId");

                    b.ToTable("attachments", t =>
                        {
                            t.HasCheckConstraint("CK_Attachment_Ticket_Or_Interaction", "(TicketId IS NOT NULL AND InteractionId IS NULL) OR (TicketId IS NULL AND InteractionId IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Interaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(3000)");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("interactions");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.OrganizationsSLA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SLAInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("SLAPriority")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("organizationsSLAs");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Departament")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(3000)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("varchar(6)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("Fixeon.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CNPJ")
                        .IsUnique();

                    b.ToTable("companies");
                });

            modelBuilder.Entity("Fixeon.Domain.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Attachment", b =>
                {
                    b.HasOne("Fixeon.Domain.Core.Entities.Interaction", "Interaction")
                        .WithMany("Attachments")
                        .HasForeignKey("InteractionId");

                    b.HasOne("Fixeon.Domain.Core.Entities.Ticket", "Ticket")
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId");

                    b.Navigation("Interaction");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Interaction", b =>
                {
                    b.HasOne("Fixeon.Domain.Core.Entities.Ticket", "Ticket")
                        .WithMany("Interactions")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.InteractionUser", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("InteractionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("UserEmail")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("userEmail");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasColumnType("varchar(36)")
                                .HasColumnName("userId");

                            b1.HasKey("InteractionId");

                            b1.ToTable("interactions");

                            b1.WithOwner()
                                .HasForeignKey("InteractionId");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.OrganizationsSLA", b =>
                {
                    b.HasOne("Fixeon.Domain.Entities.Organization", "Organization")
                        .WithMany("SLAs")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Ticket", b =>
                {
                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.Analyst", "AssignedTo", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AnalystEmail")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("analystEmail");

                            b1.Property<string>("AnalystId")
                                .IsRequired()
                                .HasColumnType("varchar(36)")
                                .HasColumnName("analystId");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.Analyst", "ClosedBy", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AnalystEmail")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("closedByName");

                            b1.Property<string>("AnalystId")
                                .IsRequired()
                                .HasColumnType("varchar(36)")
                                .HasColumnName("closedById");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.SLAInfo", "SLAInfo", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");

                            b1.OwnsOne("Fixeon.Domain.Core.ValueObjects.SLA", "FirstInteraction", b2 =>
                                {
                                    b2.Property<Guid>("SLAInfoTicketId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime?>("Accomplished")
                                        .HasColumnType("datetime")
                                        .HasColumnName("FirstInteractionAccomplished");

                                    b2.Property<DateTime?>("Deadline")
                                        .HasColumnType("datetime")
                                        .HasColumnName("FirstInteractionDeadline");

                                    b2.HasKey("SLAInfoTicketId");

                                    b2.ToTable("tickets");

                                    b2.WithOwner()
                                        .HasForeignKey("SLAInfoTicketId");
                                });

                            b1.OwnsOne("Fixeon.Domain.Core.ValueObjects.SLA", "Resolution", b2 =>
                                {
                                    b2.Property<Guid>("SLAInfoTicketId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<DateTime?>("Accomplished")
                                        .HasColumnType("datetime")
                                        .HasColumnName("ResolutionAccomplished");

                                    b2.Property<DateTime?>("Deadline")
                                        .HasColumnType("datetime")
                                        .HasColumnName("ResolutionDeadline");

                                    b2.HasKey("SLAInfoTicketId");

                                    b2.ToTable("tickets");

                                    b2.WithOwner()
                                        .HasForeignKey("SLAInfoTicketId");
                                });

                            b1.Navigation("FirstInteraction")
                                .IsRequired();

                            b1.Navigation("Resolution")
                                .IsRequired();
                        });

                    b.OwnsOne("Fixeon.Domain.Core.ValueObjects.User", "CreatedByUser", b1 =>
                        {
                            b1.Property<Guid>("TicketId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("OrganizationId")
                                .HasColumnType("varchar(36)")
                                .HasColumnName("OrganizationId");

                            b1.Property<string>("OrganizationName")
                                .HasColumnType("varchar(50)")
                                .HasColumnName("OrganizationName");

                            b1.Property<string>("UserEmail")
                                .IsRequired()
                                .HasColumnType("varchar(100)")
                                .HasColumnName("userEmail");

                            b1.Property<string>("UserId")
                                .IsRequired()
                                .HasColumnType("varchar(36)")
                                .HasColumnName("userId");

                            b1.HasKey("TicketId");

                            b1.ToTable("tickets");

                            b1.WithOwner()
                                .HasForeignKey("TicketId");
                        });

                    b.Navigation("AssignedTo");

                    b.Navigation("ClosedBy");

                    b.Navigation("CreatedByUser")
                        .IsRequired();

                    b.Navigation("SLAInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Fixeon.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Fixeon.Domain.Entities.Company", "Company")
                        .WithMany("Organizations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Interaction", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Fixeon.Domain.Core.Entities.Ticket", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Interactions");
                });

            modelBuilder.Entity("Fixeon.Domain.Entities.Company", b =>
                {
                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Fixeon.Domain.Entities.Organization", b =>
                {
                    b.Navigation("SLAs");
                });
#pragma warning restore 612, 618
        }
    }
}
